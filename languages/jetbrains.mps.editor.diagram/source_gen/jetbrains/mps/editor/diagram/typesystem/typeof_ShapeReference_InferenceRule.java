package jetbrains.mps.editor.diagram.typesystem;

/*Generated by MPS */

import jetbrains.mps.lang.typesystem.runtime.AbstractInferenceRule_Runtime;
import jetbrains.mps.lang.typesystem.runtime.InferenceRule_Runtime;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.typesystem.inference.TypeCheckingContext;
import jetbrains.mps.lang.typesystem.runtime.IsApplicableStatus;
import java.util.Iterator;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.typesystem.inference.EquationInfo;
import jetbrains.mps.errors.messageTargets.MessageTarget;
import jetbrains.mps.errors.messageTargets.NodeMessageTarget;
import jetbrains.mps.errors.IErrorReporter;
import jetbrains.mps.smodel.SModelUtil_new;

public class typeof_ShapeReference_InferenceRule extends AbstractInferenceRule_Runtime implements InferenceRule_Runtime {
  public typeof_ShapeReference_InferenceRule() {
  }

  public void applyRule(final SNode node, final TypeCheckingContext typeCheckingContext, IsApplicableStatus status) {
    {
      Iterator<SNode> param_it = ListSequence.fromList(SLinkOperations.getTargets(SLinkOperations.getTarget(node, "shape", false), "parameters", true)).iterator();
      Iterator<SNode> paramVal_it = ListSequence.fromList(SLinkOperations.getTargets(node, "parameterValues", true)).iterator();
      SNode param_var;
      SNode paramVal_var;
      while (param_it.hasNext() && paramVal_it.hasNext()) {
        param_var = param_it.next();
        paramVal_var = paramVal_it.next();
        {
          SNode _nodeToCheck_1029348928467 = paramVal_var;
          EquationInfo _info_12389875345 = new EquationInfo(_nodeToCheck_1029348928467, null, "r:d091828e-0497-41a3-b992-522e152c161c(jetbrains.mps.editor.diagram.typesystem)", "2573399587961167337", 0, null);
          typeCheckingContext.createLessThanInequality((SNode) typeCheckingContext.typeOf(_nodeToCheck_1029348928467, "r:d091828e-0497-41a3-b992-522e152c161c(jetbrains.mps.editor.diagram.typesystem)", "2573399587961167143", true), (SNode) SLinkOperations.getTarget(param_var, "type", true), false, true, _info_12389875345);
        }
      }
    }
    if (ListSequence.fromList(SLinkOperations.getTargets(SLinkOperations.getTarget(node, "shape", false), "parameters", true)).count() != ListSequence.fromList(SLinkOperations.getTargets(node, "parameterValues", true)).count()) {
      {
        MessageTarget errorTarget = new NodeMessageTarget();
        IErrorReporter _reporter_2309309498 = typeCheckingContext.reportTypeError(node, ListSequence.fromList(SLinkOperations.getTargets(SLinkOperations.getTarget(node, "shape", false), "parameters", true)).count() + " parameters expected", "r:d091828e-0497-41a3-b992-522e152c161c(jetbrains.mps.editor.diagram.typesystem)", "2573399587961208549", null, errorTarget);
      }
    }
  }

  public String getApplicableConceptFQName() {
    return "jetbrains.mps.editor.diagram.structure.ShapeReference";
  }

  public IsApplicableStatus isApplicableAndPattern(SNode argument) {
    {
      boolean b = SModelUtil_new.isAssignableConcept(argument.getConcept().getQualifiedName(), this.getApplicableConceptFQName());
      return new IsApplicableStatus(b, null);
    }
  }

  public boolean overrides() {
    return false;
  }
}
