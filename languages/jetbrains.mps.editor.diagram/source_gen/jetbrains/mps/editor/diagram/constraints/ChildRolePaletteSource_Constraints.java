package jetbrains.mps.editor.diagram.constraints;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.base.BaseConstraintsDescriptor;
import java.util.Map;
import jetbrains.mps.smodel.runtime.ReferenceConstraintsDescriptor;
import java.util.HashMap;
import jetbrains.mps.smodel.runtime.base.BaseReferenceConstraintsDescriptor;
import org.jetbrains.annotations.Nullable;
import jetbrains.mps.smodel.runtime.ReferenceScopeProvider;
import jetbrains.mps.smodel.runtime.base.BaseScopeProvider;
import org.jetbrains.mps.openapi.model.SNodeReference;
import jetbrains.mps.scope.Scope;
import jetbrains.mps.smodel.IOperationContext;
import jetbrains.mps.smodel.runtime.ReferenceConstraintsContext;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.smodel.behaviour.BehaviorReflection;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.scope.ListScope;
import jetbrains.mps.lang.structure.behavior.AbstractConceptDeclaration_Behavior;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.smodel.SNodePointer;

public class ChildRolePaletteSource_Constraints extends BaseConstraintsDescriptor {
  public ChildRolePaletteSource_Constraints() {
    super("jetbrains.mps.editor.diagram.structure.ChildRolePaletteSource");
  }

  @Override
  protected Map<String, ReferenceConstraintsDescriptor> getNotDefaultReferences() {
    Map<String, ReferenceConstraintsDescriptor> references = new HashMap();
    references.put("linkDeclaration", new BaseReferenceConstraintsDescriptor("linkDeclaration", this) {
      @Override
      public boolean hasOwnScopeProvider() {
        return true;
      }

      @Nullable
      @Override
      public ReferenceScopeProvider getScopeProvider() {
        return new BaseScopeProvider() {
          @Override
          public SNodeReference getSearchScopeValidatorNode() {
            return breakingNode_pypulp_a0a0a0a0a1a0b0a1a1;
          }

          @Override
          public Scope createScope(final IOperationContext operationContext, final ReferenceConstraintsContext _context) {
            {
              SNode concept = BehaviorReflection.invokeVirtual((Class<SNode>) ((Class) Object.class), SNodeOperations.getAncestor(_context.getContextNode(), "jetbrains.mps.lang.editor.structure.AbstractComponent", true, false), "virtual_getConceptDeclaration_7055725856388417603", new Object[]{});
              return new ListScope(AbstractConceptDeclaration_Behavior.call_getAggregationLinkDeclarations_1213877394521(concept)) {
                public String getName(SNode child) {
                  return SPropertyOperations.getString(child, "role");
                }
              };
            }
          }
        };
      }
    });
    return references;
  }

  private static SNodePointer breakingNode_pypulp_a0a0a0a0a1a0b0a1a1 = new SNodePointer("r:52332b22-3bbd-40bc-9855-cc730b5beaa9(jetbrains.mps.editor.diagram.constraints)", "1981294357059897333");
}
