package jetbrains.mps.editor.diagram.editor;

/*Generated by MPS */

import jetbrains.mps.openapi.editor.descriptor.EditorAspectDescriptor;
import java.util.Collection;
import jetbrains.mps.openapi.editor.descriptor.ConceptEditor;
import jetbrains.mps.smodel.runtime.ConceptDescriptor;
import java.util.Arrays;
import java.util.Collections;
import jetbrains.mps.openapi.editor.descriptor.ConceptEditorComponent;

public class EditorAspectDescriptorImpl implements EditorAspectDescriptor {


  public Collection<ConceptEditor> getEditors(ConceptDescriptor descriptor) {
    switch (Arrays.binarySearch(stringSwitchCases_xbvbvu_a0a0b, descriptor.getConceptFqName())) {
      case 0:
        return Collections.<ConceptEditor>singletonList(new AbstractFigureArgument_Editor());
      case 1:
        return Collections.<ConceptEditor>singletonList(new AttributedFigureReference_Editor());
      case 2:
        return Collections.<ConceptEditor>singletonList(new BLQueryArgument_Editor());
      case 3:
        return Collections.<ConceptEditor>singletonList(new CellModel_Diagram_Editor());
      case 4:
        return Collections.<ConceptEditor>singletonList(new CellModel_DiagramConnector_Editor());
      case 5:
        return Collections.<ConceptEditor>singletonList(new CellModel_DiagramNode_Editor());
      case 6:
        return Collections.<ConceptEditor>singletonList(new CellModel_DiagramPort_Editor());
      case 7:
        return Collections.<ConceptEditor>singletonList(new ConnectionEndBLQuery_Editor());
      case 8:
        return Collections.<ConceptEditor>singletonList(new DiagramElementBLQuery_Editor());
      case 9:
        return Collections.<ConceptEditor>singletonList(new ExternalFigureReference_Editor());
      case 10:
        return Collections.<ConceptEditor>singletonList(new ExternalPortSpecification_Editor());
      case 11:
        return Collections.<ConceptEditor>singletonList(new InplacePortSpecification_Editor());
      case 12:
        return Collections.<ConceptEditor>singletonList(new PortSpecification_Editor());
      case 13:
        return Collections.<ConceptEditor>singletonList(new ThisEditorNodeExpression_Editor());
      default:
    }
    return Collections.<ConceptEditor>emptyList();
  }

  public Collection<ConceptEditorComponent> getEditorComponents(ConceptDescriptor descriptor, String editorComponentId) {
    switch (Arrays.binarySearch(stringSwitchCases_xbvbvu_a0a0c, descriptor.getConceptFqName())) {
      case 0:
        if ("jetbrains.mps.editor.diagram.editor.ArgumentsComponent".equals(editorComponentId)) {
          return Collections.<ConceptEditorComponent>singletonList(new ArgumentsComponent());
        }
        break;
      default:
    }
    return Collections.<ConceptEditorComponent>emptyList();
  }



  private static String[] stringSwitchCases_xbvbvu_a0a0b = new String[]{"jetbrains.mps.editor.diagram.structure.AbstractFigureArgument", "jetbrains.mps.editor.diagram.structure.AttributedFigureReference", "jetbrains.mps.editor.diagram.structure.BLQueryArgument", "jetbrains.mps.editor.diagram.structure.CellModel_Diagram", "jetbrains.mps.editor.diagram.structure.CellModel_DiagramConnector", "jetbrains.mps.editor.diagram.structure.CellModel_DiagramNode", "jetbrains.mps.editor.diagram.structure.CellModel_DiagramPort", "jetbrains.mps.editor.diagram.structure.ConnectionEndBLQuery", "jetbrains.mps.editor.diagram.structure.DiagramElementBLQuery", "jetbrains.mps.editor.diagram.structure.ExternalFigureReference", "jetbrains.mps.editor.diagram.structure.ExternalPortSpecification", "jetbrains.mps.editor.diagram.structure.InplacePortSpecification", "jetbrains.mps.editor.diagram.structure.PortSpecification", "jetbrains.mps.editor.diagram.structure.ThisEditorNodeExpression"};
  private static String[] stringSwitchCases_xbvbvu_a0a0c = new String[]{"jetbrains.mps.editor.diagram.structure.AbstractFigureReference"};
}
